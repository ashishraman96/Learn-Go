													-----------------------------	
																DAY 1
													-----------------------------

ARRAY:
--------
a:=[5]int{}
b:= [3][4] int{{1,2,3,4},{5,6,7,8},{9,10,11,12}}
c:=[][]int{}


SLICE:
---------
s:= b[1:4] contains 123
s= append(s,100) will save 100 in b also until its size is filled
s = append(s[:3], s[:4]...) //inserts element at 4th position
s = append(s[:3], s[4:]...) r:=//deletes 4th elements

STRING:
---------
s:="Hello how are you"
words:=strings.Split(s," ") // returns slice of different words
x:= words[1]
s1:= strings.Join(words,":")
r:= strings.Contains(s,"are")
fmt.Println(r) // prints true


MAP: Collection of key value - pairs
-------------------------------------
var m map[int]string
m1 := map[int]string{1:"one",2:"two"}
m1[3]="three"
v,ok := m1[3] // ok is true or false depending upon the result of the map, if the key exists or not
delete(m1,2) //deletes an element from the map with key 2

m := map[int]string{}
m1:= map[string]int{}
m2:= map[string][]int{} // map of slices
m3:= map[string]map[string]int{}


m4:= []map[int][3]int{map[int][3]int{1:[3]int{10,20,30}}}


CONTROL STRUCTURES:
-----------------------
for loop

a:=[5]int{10,20,30,40,50}
for i,v := range a {
		fmt.Print(i) // prints range, i.e 12345
		fmt.Print(v) // prints value, i.e 10,20,30,40,50
}

SCANNING STRING:
-----------------
scanner := bufio.NewScanner(os.Stdio)
scanner.Scan()
s:=scanner.Text()
fmt.Println(s)


PROBLEMS:
----------
1. Write a code to find a given number is even or odd.
2. Write a code to find the smallest number out of 3 numbers
3. Write a code to count the number of even length words from a given string.
4. Write a code to swap first element with last element, second with last but one and so on from a given n elements.
5. Write a code to test a given IP address is valid or not
6. Write a code to remove all duplicate words from a given string.
7. Write a code to find the frequency occurence of words from a given string.
8. Write a code to read and display a matrix
9. Write a code to find sum of two matrices.
10.Write a code to find the sum of n matrices.
11. Write a code to read n IP addresses from the keyboard and classify accordingly.(Valid, invalid, class A, class B, class C, class D)
12. Write a code to read n strings from the keyboard and classify according to the following relations. Based on 
		a)the length 
		b)the number of words
13. Write a code to create a matrix and then swap any two rows or two columns.


													-----------------------------	
																DAY 2
													-----------------------------


FUNCTIONS
----------
func name(inputs) return_type{
	
}

slice are variable and are copied by reference
arrays are static and are copied by value

POINTERS
---------
var m int
m=10
var p *int
p = &m

var n int 
n=*p
*p=20

var ptr *int
ptr = new(int)
*ptr = 10

ARRAY POINTER
--------------
var a [5]int
var p *[5]int
p=&a
a[0]=10
(*p)[0]=20

SLICE POINTER
-------------
var ptr *[]int
ptr=new([]int) //new function returns address. Eg a team, but a team may have no members, but just the address
// (*ptr)[0]=10 will throw an error since there is no space specified
*ptr = append(*ptr,10)


s1 := make([]int,5,10)
n := len(s1) // length or allocated size, returns 5
c := cap(s1) // capacity, returns 10


INNER AND OUTER FUNCTION
--------------------------

func outer() func() int {
	state:=10
	inner:= func() int{
		return state
	}
	return inner
}

func main(){
	inn:=outer()
	s:=inn()
	fmt.Println(s) //prints 10
}

GENERATOR
---------

func sequence(seed int) func() int{
	i:=0
	gen:=func() int{
		i=i+1
		return i
	}
	return gen
}
func main(){
	int_seq := sequence(0)
}

DECORATOR
----------

func additionalService( f func(int,int) int, a int) func (int,int) int{
	decor:= func(x,y int) int{
		return f(x,y)+a
	}
	return decor
}

func add(a,b int) int{
	return a+b
}

func main(){
	s:=add(2,3)
	fmt.Println(s)

	s1:=additionalService(add,15)(2,3)
	fmt.Println(s1) //prints 20

	// s1:=additionalService(add,15)
	// s2:=s1(2,3)
	// fmt.Println(s2)
}

STRUCTURES
-----------

type rectange struct{
	length int
	breadth int
}

int (r1 rectangle) area(){
	return r1.length*r1.breadth
}


func main(){
	r:=rectangle{2,3}
	a:=r.area()
	fmt.Print("Area=",a)
	r= r.isSquare()
	if r==true{
		fmt.Println("Its a square")
	}else{
		fmt.Println("Its not a square")
	}

}

FILE MANAGEMENT
---------------

fin,err := os.Open("temp.txt")
if err != nil{
	panic(err)
}
defer fin.Close()
fout,err := os.Create("temp1.txt")
if err != nil{
	panic(err)
}
defer fout.Close()
b:=make([]byte,1)
for{
	n,_ :=fin.Read(b) //n is the number of bytes read
	if n==0 {break} //end of file
	fout.Write(b)
}

scanner:=bufio.NewScanner(fin)
for scanner.Scan(){
	line=scanner.Text()
	fout.Write([]byte(line+"\n"))
}

//open file in append mode
fin, _ :=os.OpenFile("temp.txt", os.O_CREATE|os.O_APPEND|os.O_WRONLY, 0666)

PROBLEMS
---------
1. Write a code to copy the content of first n-1 files into nth file with cli interface
2. Write a code to split a file into n partition with cli interface
3. Write a code to find a sum of two matrixes using files with cli interface



													-----------------------------	
																DAY 3
													-----------------------------

CHANNEL
--------

func main(){
	a:=2
	b:=3
	c:= make(chan int)
	go add(a,b,c)
	r:= <-c
	fmt.Println("sum:",r)
}

func add(a,b int, c chan int){
	s:=a+b
	time.Sleep(time.Second)
	c <- s
}


func main(){
	a:= []int {1,2,3,4,5,6,7,8,9,10}
	n:= len(a)
	c1:= make(chan int)
	c2:= make(chan int)
	go addn(a[:n/2],c1)
	go addn(a[n/2:],c2)
	select{
	case r1:= <-c1: 
		fmt.Println("r1:",r1)
	case r2:= <-c2:
		fmt.Println("r2:",r2)
	}
}

func addn(s []int, c chan int){
	r:=0
	for _,x := range s{
		r=r+x
	}
	c <- r
}


rand.Seed(time.Now().Unix())

r:= rand.Int()%100
fmt.Println(r)

RELATIONSHIP
-------------

a) is_a : inheritance
b) has_a: containment

REGULAR EXPRESSION
------------------

. -> any one character
? -> zero or one
+ -> one or more
* -> zero or more
^ -> at the beginning of string
$ -> at the end of string
[abc] -> any one of a b c
(abc) -> group of abc
{m} -> m times
{m, n} -> atleast m times, atmost n times
| -> or
\ -> escape sequence
\s -> a space
\d -> a digit character -- [0-9]
\w -> a word character -- [a-zA-Z0-9_]
\b -> a word boundary



^hello$

PROBLEMS
---------
1. Write a code to generate random n prime numbers
2. Write a code to find a sum of all the numbers available in a string
3. Write a code to extract all the words which begins with capital letter from a given string
4. Write a code to extract all the words which begins with capital letter and ends with lower case vowel
5. Write a code to extract all the words which contains atleast one vowel from a given string.
6. Write a code to extract all the capital letter words from a string.
7. Write a code to extract both positive and negative number available in the string.
8. Write a code to extract all even length numbers available in the string.
9. Write a code to extract all the numbers between 1 and 255 inclusive.
10. Write a code to extract all valid ipaddress available in the string. 

TESTING
---------
go test -v .\addition_test.go
file name should end with _test
Function name should start with Test ex: TestSum
go test -bench=. ( current directory)
































